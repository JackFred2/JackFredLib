name: Publish
run-name: Publish

on:
  workflow_dispatch:
    inputs:
      lastTagOverride:
        description: 'Previous Tag Override (prefix with "v")'
        required: false
        type: boolean
      #newTag:
      #  description: 'New Tag | Format: (ex: v0.1.3)'
      #  required: true
      changelogHeader:
        description: 'Message to place at the top of the changelog.'
        required: true
        default: ""
        type: string

permissions:
  # packages: write
  contents: write

jobs:
  publish:
    strategy:
      matrix:
        # Use these Java versions
        java: [17]
        # and run on both Linux and Windows
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # tag parsing
      - name: Set previous tag from override
        if: ${{ inputs.lastTagOverride != null }}
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${{ inputs.lastTagOverride }}"; then
            echo "lastTagOverride exists"
            exit 0
          else
            echo "lastTagOverride doesn't exist, failing"
            exit 1
          fi
          echo "PREVIOUS_TAG=${{ inputs.lastTagOverride }}" >> "$GITHUB_ENV"
      - name: Set previous tag from git history
        if: ${{ inputs.lastTagOverride == null }}
        run: |
          previous=`git describe --tags --abbrev=0`
          if [ $previous ]; then
            echo "PREVIOUS_TAG=$previous" >> "$GITHUB_ENV"
          else
            echo "PREVIOUS_TAG=NONE" >> "$GITHUB_ENV"
          fi

      - name: Get current version from gradle & check it doesn't exist
        run: |
          current=$(./gradlew -q :getRootVersion | tail -n 1)
          if git show-ref --tags --verify --quiet "refs/tags/${{ inputs.newTag }}"; then
            echo "newTag already exists, failing"
            exit 1
          else
            echo "newTag doesn't exist"
            exit 0
          fi

      - name: Create version tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ inputs.newTag }}",
              sha: context.sha
            })

      - name: Fetch tags
        run: git fetch --tags

      - name: Fetch repo data
        run: git fetch origin

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: build & run tests
        run: ./gradlew check build

      - name: Publish to JackFred Maven and GitHub Release
        run: ./gradlew generateChangelog publish githubRelease -PchangelogHeaderAddon=${{ inputs.changelogHeader }}"
        env:
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JACKFRED_MAVEN_USER: ${{ secrets.JACKFRED_MAVEN_USER }}
          JACKFRED_MAVEN_PASS: ${{ secrets.JACKFRED_MAVEN_PASS }}

      - name: Capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # Only upload artifacts built from LTS java on one OS
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: |
            api/build/libs/
